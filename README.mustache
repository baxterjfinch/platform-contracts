<p align="center"><img src="https://cdn.dribbble.com/users/1299339/screenshots/7133657/media/837237d447d36581ebd59ec36d30daea.gif" width="280"/></p>

<p align="center">Immutable is the creator behind the hit game - Gods Unchained. Here is a mono-repo containing all the code for our public contracts.</p>

<p align="center">
  <a href="https://solidity.readthedocs.io/en/develop/index.html">
    <img src="https://img.shields.io/badge/SOLIDITY-0.5.11-orange.svg" />
  </a>
  <a href="https://opensource.org/licenses/Apache-2.0">
    <img src="https://img.shields.io/badge/LICENSE-APACHE2.0-3DA639.svg" />
  </a>
</p>

## Packages :package:

### Contracts

|                            Package                             |                                                                Version                                                                |                           Description                           |
| -------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------- |
| [`@imtbl/gods-unchained`](/contracts/gods-unchained)                                     | [![npm](https://img.shields.io/npm/v/@imtbl/gods-unchained.svg)](https://www.npmjs.com/package/@imtbl/gods-unchained)                                                 | Gods Unchained smart contracts and typings       |
| [`@imtbl/immutable-wallet`](/contracts/immutable-wallet)                                   | [![npm](https://img.shields.io/npm/v/@imtbl/immutable-wallet.svg)](https://www.npmjs.com/package/@imtbl/immutable-wallet)                                               | Immutable Smart Contract Wallet contracts and typings                    |

### Published

|                            Package                             |                                                                Version                                                                |                           Description                           |
| -------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------- |
| [`@imtbl/addresses`](/packages/addresses)                                     | [![npm](https://img.shields.io/npm/v/@imtbl/addresses.svg)](https://www.npmjs.com/package/@imtbl/addresses)                                                 | Public addresses of deloyed contracts       |
| [`@imtbl/artifacts`](/packages/artifacts)                                   | [![npm](https://img.shields.io/npm/v/@imtbl/artifacts.svg)](https://www.npmjs.com/package/@imtbl/artifacts)                                               | ABIs of all the main contracts needed for development                    |
| [`@imtbl/tests-utils`](/packages/test-utils)                 | [![npm](https://img.shields.io/npm/v/@imtbl/test-utils.svg)](https://www.npmjs.com/package/@imtbl/test-utils)                 | Developer utilities                                             |
| [`@imtbl/utils`](/packages/utils)                 | [![npm](https://img.shields.io/npm/v/@imtbl/utils.svg)](https://www.npmjs.com/package/@imtbl/test-utils)                 | Utilities while developing with our contracts                                             |
| [`@imtbl/types`](/packages/types)                         | [![npm](https://img.shields.io/npm/v/@imtbl/types.svg)](https://www.npmjs.com/package/@imtbl/types)                         | Shared type declarations                                        |

### Private

|                       Package                        |              Description              |
| ---------------------------------------------------- | ------------------------------------- |
| [`@imtbl/deployment`](/packages/deployment)       | Immutable contract deployment scripts   |
| [`@imtbl/order-generator`](/packages/order-generator)                 | Order generator used for testing |


## Addresses :innocent:

We get it, you're just here to find the contract addresses. Luckily for you, they're all listed here.

### Contracts (Main Net)

| Contract Name | Address |
| ------------- | ------- |
{{#1-production.addresses}}
| `Cards` | [{{Cards}}](https://etherscan.io/address/{{Cards}}) |
| `Forwarder` | [{{Forwarder}}](https://etherscan.io/address/{{Forwarder}}) |
{{/1-production.addresses}}

### Contracts (Ropsten)

| Contract Name | Address |
| ------------- | ------- |
{{#3-staging.addresses}}
| `Cards` | [{{Cards}}](https://ropsten.etherscan.io/address/{{Cards}}) |
| `OpenMinter` | [{{OpenMinter}}](https://ropsten.etherscan.io/address/{{OpenMinter}}) |
| `Forwarder` | [{{Forwarder}}](https://ropsten.etherscan.io/address/{{Forwarder}}) |
| `Fusing` | [{{Fusing}}](https://ropsten.etherscan.io/address/{{Fusing}}) |
{{/3-staging.addresses}}

### Repo Guide

While we've done our best to simplify the repo setup as much as possible, there's some steps we require.

##### Step 1:

Install required global dependencies

```
npm install -g lerna
npm install -g typescript@2.6.2
```

##### Step 2:

Install all the required local dependencies. Lerna will ensure all local dependenices are setup correctly.

```
lerna bootstrap
```

##### Step 3

Run a local blockchain instance on your localhost. We recommend opening this in a new terminal window/tab.

```
yarn chain
```

##### Step 4

Compile all packages. This will compile all the contracts and generate all the relevant Typescript bindings for other repos to work. 
Tests will run to ensure everything works as expected.

```
yarn setup && yarn yarn test
```

### Creating Test Cards

In order to generate test cards on your local blockchain or testnet deployment, follow these steps.

##### Step 1

Create a copy of `.env.defaults` and rename it to `.env`

##### Step 2
Fill out all the required variables inside the .env file. You don't need `ETHERSCAN_KEY` unless you want verified contracts on Etherscan.

> Make sure to set DEPLOYMENT_NETWORK_ID for 50 if testing locally.

##### Step 3

Run `yarn deploy-cards` - that's it!
Your newly deployed cards will be on your specified chain and you'll be able to see them in the specified DB!
